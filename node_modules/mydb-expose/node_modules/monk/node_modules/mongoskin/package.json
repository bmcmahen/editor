{
  "name": "mongoskin",
  "description": "The future layer above node-mongodb-native",
  "version": "0.3.6",
  "author": {
    "name": "Gui Lin",
    "email": "guileen@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/guileen/node-mongoskin.git"
  },
  "main": "index",
  "keywords": [
    "mongodb"
  ],
  "engines": {
    "node": ">=0.4.0"
  },
  "dependencies": {
    "mongodb": "1.0.x"
  },
  "devDependencies": {
    "myconsole": ">=0.1.2",
    "expresso": "0.9.2",
    "should": "0.3.2"
  },
  "directories": {
    "lib": "lib/mongoskin"
  },
  "readme": "## This project is a wrapper of node-mongodb-native\n\n* node-mongodb-native document http://christkv.github.com/node-mongodb-native/\n\n## How to validate input?\n\nI wrote a middleware to validate post data, [node-iform](https://github.com/guileen/node-iform) \nbase on [node-validator](https://github.com/chriso/node-validator)\n\n<a name='index'>\n\n# Mongoskin document\n\n* [Nodejs mongodb drivers comparation](#comparation)\n* [Install](#install)\n* [Quick Start](#quickstart)\n    * [Connect easier](#quickstart-1)\n    * [Server options and BSON options](#quickstart-2)\n    * [Similar API with node-mongodb-native](#quickstart-3)\n    * [Cursor easier](#quickstart-4)\n    * [MVC helper](#quickstart-5)\n* [Documentation](#documentation)\n    * [Module](#module)\n    * [SkinServer](#skinserver)\n    * [SkinDb](#skindb)\n    * [SkinCollection](#skincollection)\n      * [Additional methods](#additional-collection-op)\n      * [Collection operation](#inherit-collection-op)\n      * [Indexes](#inherit-indexes)\n      * [Querying](#inherit-query)\n      * [Aggregation](#inherit-aggregation)\n      * [Inserting](#inherit-inserting)\n      * [Updating](#inherit-updating)\n      * [Removing](#inherit-removing)\n    * [SkinCursor](#skincursor)\n\n<a name='comparation'>\n\nNodejs Mongodb Driver Comparison\n========\n\nnode-mongodb-native\n--------\n\nOne of the most powerful Mongo drivers is node-mongodb-native. Most other drivers build\non top of it, including mongoskin. Unfortunately, it has an awkward interface with too many \ncallbacks. Also, mongoskin needs a way to hold a Collection instance as an MVC model.\n  \nSee [mongodb-native](https://github.com/christkv/node-mongodb-native/tree/master/docs)\n\nmongoose\n--------\n\nMongoose provides an ORM way to hold Collection instance as Model,\n  you should define schema first. But why mongodb need schema?\n  Some guys like me, want to write code from application layer but not database layer,\n  and we can use any fields without define it before.\n\n  Mongoose provide a DAL that you can do validation, and write your middlewares.\n  But some guys like me would like to validate manually, I think it is the tao of mongodb.\n\n  If you don't thinks so, [Mongoose-ORM](https://github.com/LearnBoost/mongoose) is probably your choice.\n\nmongoskin\n--------\n\nMongoskin is an easy to use driver of mongodb for nodejs,\n  it is similar with mongo shell, powerful like node-mongodb-native,\n  and support additional javascript method binding, which make it can act as a Model(in document way).\n\nIt will provide full features of [node-mongodb-native](https://github.com/christkv/node-mongodb-native),\n  and make it [future](http://en.wikipedia.org/wiki/Future_%28programming%29).\n\nIf you need validation, you can use [node-iform](https://github.com/guileen/node-iform).\n\n[Back to index](#index)\n\n<a name='install'></a>\n\nInstall\n========\n\n    npm install mongoskin\n\n[Back to index](#index)\n\n\n<a name='quickstart'></a>\n\nQuick Start\n========\n\n **Is mongoskin synchronized?**\n\nNope! It is asynchronized, it use the [future pattern](http://en.wikipedia.org/wiki/Future_%28programming%29).\n**Mongoskin** is the future layer above [node-mongodb-native](https://github.com/christkv/node-mongodb-native)\n\n<a name='quickstart-1'></a>\n\nConnect easier\n--------\nYou can connect to mongodb easier now.\n\n    var mongo = require('mongoskin');\n    mongo.db('localhost:27017/testdb').collection('blog').find().toArray(function(err, items){\n        console.dir(items);\n    })\n\n<a name='quickstart-2'></a>\n\nServer options and BSON options\n--------\nYou can also set `auto_reconnect` options querystring.\nAnd native_parser options will automatically set if native_parser is avariable.\n\n    var mongo = require('mongoskin'),\n        db = mongo.db('localhost:27017/test?auto_reconnect');\n\n<a name='quickstart-3'></a>\n\nSimilar API with node-mongodb-native\n--------\nYou can do everything that node-mongodb-native can do.\n\n    db.createCollection(...);\n    db.collection('user').ensureIndex([['username', 1]], true, function(err, replies){});\n    db.collection('posts').hint = 'slug';\n    db.collection('posts').findOne({slug: 'whats-up'}, function(err, post){\n        // do something\n    });\n\n<a name='quickstart-4'></a>\n\nCursor easier\n--------\n\n    db.collection('posts').find().toArray(function(err, posts){\n        // do something\n    });\n\n<a name='quickstart-5'></a>\n\nMVC helper\n--------\n\nYou can bind **additional methods** for collection.\nIt is very useful if you want to use MVC patterns with nodejs and mongodb.\nYou can also invoke collection by properties after bind,\nit could simplfy your `require`.\n\n    db.bind('posts', {\n       findTop10 : function(fn){\n         this.find({}, {limit:10, sort:[['views', -1]]}).toArray(fn);\n       },\n       removeTagWith : function(tag, fn){\n         this.remove({tags:tag},fn);\n       }\n    });\n\n    db.bind('comments');\n\n    db.collection('posts').removeTagWith('delete', function(err, replies){\n      //do something\n    });\n\n    db.posts.findTop10(function(err, topPosts){\n      //do something\n    });\n\n    db.comments.find().toArray(function(err, comments){\n      //do something\n    });\n\n[Back to index](#index)\n\n\n<a name='documentation'>\n\nDocumentation\n========\n\nfor more information, see the source.\n\n[Back to index](#index)\n\n\n<a name='module'>\n\nModule\n--------\n\n### MongoSkin Url format\n\n    [*://][username:password@]host[:port][/database][?auto_reconnect[=true|false]]`\n\ne.g.\n\n    localhost/blog\n    mongo://admin:pass@127.0.0.1:27017/blog?auto_reconnect\n    127.0.0.1?auto_reconnect=false\n\n### db(databaseUrl, db_options)\n\nGet or create instance of [SkinDb](#skindb).\n\n    var db = mongoskin.db('localhost:27017/testdb?auto_reconnect=true&poolSize=5');\n\nfor ReplSet server\n\n    var db = mongoskin.db(['192.168.0.1:27017/?auto_reconnect=true',\n                '192.168.0.2:27017/?auto_reconnect=true',\n                '192.168.0.3:27017/?auto_reconnect=true'],\n                {\n                    database: 'testdb',\n                    retryMiliSeconds: 2000\n                })\n\n### router(select)\n\nselect is function(collectionName) returns a database instance, means router collectionName to that database.\n\n    var db = mongo.router(function(coll_name){\n        switch(coll_name) {\n        case 'user':\n        case 'message':\n          return mongo.db('192.168.1.3/auth_db');\n        default:\n          return mongo.db('192.168.1.2/app_db');\n        }\n    });\n    db.bind('user', require('./shared-user-methods'));\n    var users = db.user; //auth_db.user\n    var messages = db.collection('message'); // auth_db.message\n    var products = db.collection('product'); //app_db.product\n\n### classes extends frome node-mongodb-native\n\n* BSONPure\n* BSONNative\n* BinaryParser\n* Binary\n* Code\n* DBRef\n* Double\n* MaxKey\n* MinKey\n* ObjectID\n* Symbol\n* Timestamp\n* Long\n* BaseCommand\n* DbCommand\n* DeleteCommand\n* GetMoreCommand\n* InsertCommand\n* KillCursorCommand\n* QueryCommand\n* UpdateCommand\n* MongoReply\n* Admin\n* Collection\n* Connection\n* Server\n* ReplSetServers\n* Cursor\n* Db\n* connect\n* Grid\n* Chunk\n* GridStore\n* native\n* pure\n\n\n[Back to index](#index)\n\n<a name='skinserver'>\n\nSkinServer\n--------\n\n### SkinServer(server)\n\nConstruct SkinServer from native Server instance.\n\n### db(dbname, username=null, password=null)\n\nConstruct [SkinDb](#skindb) from SkinServer.\n\n[Back to index](#index)\n\n<a name='skindb'>\n\nSkinDb\n--------\n\n### SkinDb(db, username=null, password=null)\n\nConstruct SkinDb.\n\n### open(callback)\n\nConnect to database, retrieval native\n[Db](https://github.com/christkv/node-mongodb-native/blob/master/lib/mongodb/db.js#L17)\ninstance, callback is function(err, db).\n\n### collection(collectionName)\n\nRetrieval [SkinCollection](#skincollection) instance of specified collection name.\n\n<a name='skindb-bind'>\n\n### bind(collectionName)\n\n### bind(collectionName, SkinCollection)\n\n### bind(collectionName, extendObject1, extendObject2 ...)\n\nBind [SkinCollection](#skincollection) to db properties as a shortcut to db.collection(name).\nYou can also bind additional methods to the SkinCollection, it is useful when\nyou want to reuse a complex operation. This will also affect\ndb.collection(name) method.\n\ne.g.\n\n    db.bind('book', {\n        firstBook: function(fn){\n            this.findOne(fn);\n        }\n    });\n    db.book.firstBook(function(err, book){});\n\n### all the methods from Db.prototype\n\nSee [Db](https://github.com/christkv/node-mongodb-native/blob/master/lib/mongodb/db.js#L17) of node-mongodb-native for more information.\n\n[Back to index](#index)\n\n<a name='skincollection'>\n\nSkinCollection\n--------\n\nSee [Collection](https://github.com/christkv/node-mongodb-native/blob/master/lib/mongodb/collection.js#L45) of node-mongodb-native for more information.\n\n<a name='additional-collection-op'>\n### open(callback)\n\nRetrieval native\n[Collection](https://github.com/christkv/node-mongodb-native/blob/master/lib/mongodb/collection.js#L45)\ninstance, callback is function(err, collection).\n\n### id(hex)\n\nEquivalent to\n\n    db.bson_serializer.ObjectID.createFromHexString(hex);\n\nSee [ObjectID.createFromHexString](https://github.com/christkv/node-mongodb-native/blob/master/lib/mongodb/bson/bson.js#L548)\n\n\n<a name='inherit-collection-op'>\n\n### Collection operation\n\n    checkCollectionName(collectionName)\n    options(callback)\n    rename(collectionName, callback)\n    drop(callback)\n\n<a name='inherit-indexes'>\n\n### Indexes\n\n    createIndex (fieldOrSpec, unique, callback)\n    ensureIndex (fieldOrSpec, unique, callback)\n    indexInformation (callback)\n    dropIndex (indexName, callback)\n    dropIndexes (callback)\n    \nSee [mongodb-native indexes](https://github.com/christkv/node-mongodb-native/blob/master/docs/indexes.md)\n\n<a name='inherit-query'>\n\n### Queries\n\nSee [mongodb-native queries](https://github.com/christkv/node-mongodb-native/blob/master/docs/queries.md)\n\n#### findItems(..., callback)\n\nEquivalent to\n\n    collection.find(..., function(err, cursor){\n        cursor.toArray(callback);\n    });\n\nSee [Collection.find](https://github.com/christkv/node-mongodb-native/blob/master/lib/mongodb/collection.js#L348)\n\n#### findEach(..., callback)\n\nEquivalent to\n\n    collection.find(..., function(err, cursor){\n        cursor.each(callback);\n    });\n\nSee [Collection.find](https://github.com/christkv/node-mongodb-native/blob/master/lib/mongodb/collection.js#L348)\n\n#### findById(id, ..., callback)\n\nEquivalent to\n\n    collection.findOne({_id, ObjectID.createFromHexString(id)}, ..., callback);\n\nSee [Collection.findOne](https://github.com/christkv/node-mongodb-native/blob/master/lib/mongodb/collection.js#L417)\n\n#### find(...)\n\nIf the last parameter is function, it is equivalent to native\n[Collection.find](https://github.com/christkv/node-mongodb-native/blob/master/lib/mongodb/collection.js#L348)\nmethod, else it will return a future [SkinCursor](#skincursor).\n\ne.g.\n\n    // callback\n    db.book.find({}, function(err, cursor){/* do something */});\n    // future SkinCursor\n    db.book.find().toArray(function(err, books){/* do something */});\n\n\n\n#### normalizeHintField(hint)\n\n#### find\n\n    /**\n     * Various argument possibilities\n     * 1 callback\n     * 2 selector, callback,\n     * 2 callback, options  // really?!\n     * 3 selector, fields, callback\n     * 3 selector, options, callback\n     * 4,selector, fields, options, callback\n     * 5 selector, fields, skip, limit, callback\n     * 6 selector, fields, skip, limit, timeout, callback\n     *\n     * Available options:\n     * limit, sort, fields, skip, hint, explain, snapshot, timeout, tailable, batchSize\n     */\n\n#### findAndModify(query, sort, update, options, callback) \n\n    /**\n      Fetch and update a collection\n      query:        a filter for the query\n      sort:         if multiple docs match, choose the first one in the specified sort order as the object to manipulate\n      update:       an object describing the modifications to the documents selected by the query\n      options:\n        remove:   set to a true to remove the object before returning\n        new:      set to true if you want to return the modified object rather than the original. Ignored for remove.\n        upsert:       true/false (perform upsert operation)\n    **/\n\n#### findOne(queryObject, options, callback)\n\n<a name='inherit-aggregation'>\n\n### Aggregation\n\n#### mapReduce(map, reduce, options, callback)\n\n    e.g.  ```\n      var map = function(){\n          emit(test(this.timestamp.getYear()), 1);\n      }\n      \n      var reduce = function(k, v){\n          count = 0;\n          for(i = 0; i < v.length; i++) {\n              count += v[i];\n          }\n          return count;\n      }\n      collection.mapReduce(map, reduce, {scope:{test:new client.bson_serializer.Code(t.toString())}}, function(err, collection) {\n        collection.find(function(err, cursor) {\n              cursor.toArray(function(err, results) {\n              test.equal(2, results[0].value)\n              finished_test({test_map_reduce_functions_scope:'ok'});            \n          })\n        })\n          ```\n\n#### group(keys, condition, initial, reduce, command, callback)\n\n    e.g.  `collection.group([], {}, {\"count\":0}, \"function (obj, prev) { prev.count++; }\", true, function(err, results) {`\n\n#### count(query, callback)\n#### distinct(key, query, callback)\n\n<a name='inherit-inserting'>\n\n### Inserting\n\n#### insert(docs, options, callback)\n\n<a name='inherit-updating'>\n\n### Updating\n\n#### save(doc, options, callback)\n\n    /**\n      Update a single document in this collection.\n        spec - a associcated array containing the fields that need to be present in\n          the document for the update to succeed\n\n        document - an associated array with the fields to be updated or in the case of\n          a upsert operation the fields to be inserted.\n\n      Options:\n        upsert - true/false (perform upsert operation)\n        multi - true/false (update all documents matching spec)\n        safe - true/false (perform check if the operation failed, required extra call to db)\n    **/\n\n#### update(spec, document, options, callback)\n\n#### updateById(_id, ..., callback)\n\nEquivalent to\n\n    collection.update({_id, ObjectID.createFromHexString(id)}, ..., callback);\n\nSee [Collection.update](https://github.com/christkv/node-mongodb-native/blob/master/docs/insert.md)\n\n\n<a name='inherit-removing'>\n\n### Removing\n\n#### remove(selector, options, callback)\n\n#### removeById(_id, options, callback)\n\n[Back to index](#index)\n\n<a name='skincursor'>\n\nSkinCursor\n---------\n\nSee [Cursor](https://github.com/christkv/node-mongodb-native/blob/master/lib/mongodb/cursor.js#L1)\nof node-mongodb-native for more information.\n\nAll these methods will return the SkinCursor itself.\n\n    sort(keyOrList, [direction], [callback])\n    limit(limit, [callback])\n    skip(skip, [callback])\n    batchSize(skip, [callback])\n\n    toArray(callback)\n    each(callback)\n    count(callback)\n    nextObject(callback)\n    getMore(callback)\n    explain(callback)\n\n\n[Back to index](#index)\n",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/guileen/node-mongoskin/issues"
  },
  "_id": "mongoskin@0.3.6",
  "_from": "mongoskin@0.3.6"
}
